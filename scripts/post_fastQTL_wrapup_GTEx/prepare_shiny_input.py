import argparse as ap
import pandas as pd
import os

parser = ap.ArgumentParser(description='Read in output files generated by the QTL detection pipeline and generate a single file for use in Clara\'s Shiny app')
parser.add_argument('allnominal', type=str, nargs=1, help='Path to all nominal results (chrAll_combined)')
parser.add_argument('q05perm', type=str, nargs=1, help='Path to FDR thresholded permutation pass results')
parser.add_argument('q05nominal', type=str, nargs=1, help='Path to FDR thresholded nominal pass results (after applying threshold derived from permutation pass)')
parser.add_argument('outfile', type=str, nargs=1, help='Output file')

args = parser.parse_args()
#args = parser.parse_args('/sc/arion/projects/EPIASD/splicingQTL/output/sqtls/minCovars+seqPC9/4genoPCs/35HCPs/nominal/wrapup/chrAll_combined /sc/arion/projects/EPIASD/splicingQTL/output/sqtls/minCovars+seqPC9/4genoPCs/35HCPs/permute/wrapup/chrAll_combined.FDR05 /sc/arion/projects/EPIASD/splicingQTL/output/sqtls/minCovars+seqPC9/4genoPCs/35HCPs/qtls/qtls+pid_ensg+sid_ensg_jmb+pid_ensg_jmb.txt aa.txt'.split(' '))

allnominalfile = args.allnominal[0]
q05permfile = args.q05perm[0]
q05nominalfile = args.q05nominal[0]
outfile = args.outfile[0]

allnominal = pd.read_csv(allnominalfile, sep='\s+', names=['pid','sid','dist','npval','slope'])
q05perm = pd.read_csv(q05permfile, sep='\t')
q05nominal = pd.read_csv(q05nominalfile, sep='\t')

# Add columns necessary for shiny visualization
q05nominal['is_qtl'] = True
q05perm['is_top_qtl'] = True

allnominal.set_index(['sid','pid'], drop=False, append=False, verify_integrity=False, inplace=True)
q05nominal_dd = q05nominal.drop_duplicates(['sid','pid']).set_index(['sid','pid'], verify_integrity=True,inplace=False)
q05perm.set_index(['sid','pid'], verify_integrity=True,inplace=True)

allnominal = allnominal.join(q05nominal_dd[['pid_ensg','pid_ensg_jmb','is_qtl']],how='left')
allnominal = allnominal.join(q05perm[['pval_nominal_threshold','is_top_qtl']],how='left')

# Replace empty boolean fields with False
allnominal[['is_qtl','is_top_qtl']] = allnominal[['is_qtl','is_top_qtl']].fillna(False) 

# Sanity check. Find rows where a QTL n.s. in nominal is significant in permuted 
#allnominal.loc[~allnominal['is_qtl'] & allnominal['is_top_qtl'],['is_qtl','is_top_qtl']]
#allnominal.loc['10:100011077']
#q05nominal_dd.loc['10:100011077'] 
#q05perm.loc['10:100011077']

# Write file out
allnominal.to_csv(outfile, sep='\t', index=False, header=True)
